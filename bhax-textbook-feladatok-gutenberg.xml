<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak</title>     
        <para>Juhász István - Magas szintű programozási nyelvek 1</para>   
        <para>
           Mikor programnyelvekről beszélünk akkor fontos ezeket osztályozni. Beszélhetünk magas szintű, assembly és gépi nyelvről. A magasszintű nyelven megírt program összeállítását a fordító program végzi szintaktikai és szemantikai szabályok alapján, gépi kódot készít belőle.</para>
        <para>Programnyelvek osztályozása</para> 
        <para>
            Vannak imperatív nyelvek és deklaratív nyelvek. Az imperatív nyelvekben két alcsoportot külömböztethetünk meg, eljárásorientált és objektumorienltált nyelveket. A deklaratív nyelvek nem algoritmikus nyelvek, a programozó csak a problémát oldja meg, a programozónak nincs lehetősége memóriaműveletre. Ennek alcsoportjai a funkcionális és logikai nyelvek.      
        </para>
        <para>
              Karakterkészlet 
        </para>
          <para>
               Minden programnyelv legkisebb alkotórészei a karakterek. Ezeket három kategóriába soroljuk, ezek a betűk, a számjegyek és az egyéb karakterek. A lexikális egységeket a fordító a lexikális elemzés során felismeri és tokenizálja. 
        </para>
          <para>
               Adattípusok
        </para>
          <para>
               Minden adattípusnak megvan a saját neve, ami egyben az azonosítója is. Minden adatípusnak megvan az ábrázolási módja, itt van meghatározva hogy egyes elemek a típusból hány byte-ot foglalnak a memóriában. A nyelvek megengedik a saját típus létrehozását, ha ennek megadjuk a műveleteit, tartományát és reprezentációját. Léteznek nevesítettt konstansok amelyeknek három része van: név, típus, érték amit mindig deklarálni kell, ez az érték attól fogva nem változtatható meg. A változóknak mindaddig nincs értéke amíg az nincs meghatárova, ezt egyes programnyelvek alapértelmezett nullával javítják de mindaddig amíg nem deklaráltuk saját kézből ezek így ne használjuk. 
        </para>
          <para>
               Kifejezések
        </para>
          <para>
               A kifejezések olyan szintaktikai eszközök amelyek operandusokból operátorokból és kerek zárójelekből állnak.
               Az operandus lehet literál, konstans, változó vagy függvényhívás. Az operátorok műveleti jelek. A kerek zárójelek a műveletek végrehajtási sorrendjét befojásolják, rendundásan alkalmazhatóak.
        </para>
          <para>
               Utasítások
        </para>
          <para>
               Az utasítások segítségével készíti el a fordító program a tárgyprogramot. Két részből állnak az utasítások: deklarációs és végrehajtó utasítások. A deklarációs utasítások közölik a fordítóprogrammal milyen üzemmódot állítson be és milyen szolgáltatást kérnek. A végrehajtó utasítások tartalmazzák a tárgykód lényegét. Ez lehet:
               értékadó utasítás, ugró, elágazó, ciklusszervező, hívó, vezérlésátadó,I/O utasítások és más utasítások. 
        </para>
          <para>
               A programok szerkezete
        </para>
       <para>
               Egy program szövege programegységekből áll össze. A programegység lehet alprogram, blokk, csomag, taszk. Az alprogram az eljárásorientált programozási nyelvek alapja. Az alprogram az újrafelhasználásra tökéletesen alkalmas. Felépítése: név, formális paraméter lista, törzs, környezet. A név az azonosító és a fej része a formális paraméterekkel eggyütt. A törzsben deklarációs és végrehajtható utasítások szerepelnek. Az alprogramnak két fajtája van: eljárás és függvény. Az eljárás feladatokat hajt végre és ennek az eredményét használjuk fel. A függvény egyetlen értéket határoz meg.Egyes nyelvekben az alprogramnak meg lehet adni másodlagos belépési pontot íigy ne mcsak a fejen keresztül lehet meghívni.
        </para>
          <para>
              A folyamatot mikor az alprogram hívásánál egymáshoz rendelődnek a formális és aktuális paraméterek paraméterkiértékelésnek nevezzük.
              A blokk olyan programegység amely egy másik programegységbe van beágyazva. A blokknak nincs paramétere és bárhol elhelyezhető.
        </para>
           <para>
        Paraméterkiértékelés     
        </para>  
        <para>
             A paraméterkiértékelődés során egymáshoz rendelődnek a formális és az aktuális paraméterek. Mindig az aktuális paramétereket rendeljük a formálisakhoz mert a formálisok az alprogram specifikációját tartalmazzák. Az aktuálisokból annyi van anyányszor meghíjuk az alprogramot. Két féle rendelődés létezik: sorrendi és név szeritni rendelődés. A sorrendi az aktuális és formalis paramétereket a felsorolás sorrendjében rendeli egymáshoz. A név szerinti az egymáshoz kötést a paraméterlistában határozzuk meg.
        </para>
          <para>
            Paraméterátadás             
        </para>
        <para>
        Paraméterátadási módok: érték, cím, eredmény, név és cím szerinti. Érték szerinti átadás esetén az alprogram az aktuális paraméterek értékeit kapják meg csak, ezek értkéke nem változik az alprogramon kívül. A hívott program semmit nem tud a hívóról csak. Az információ áram egyirányú. A címszeritni paraméterátadáskor a formális paramétereknek nincs nincs címkomponensük, az aktuális paramétereknek viszont feltétlen rendelkezniük kell vele. Az információátadás itt kétirányú, a hívó program az aktuális címkomponensén kresztül adhat és vehet át értékeket.
        Az alprogramok formális paramétereinek három csoportja van: input, output és input-output paraméterek.
</para>



    </section>        
    <section>
        <title>Programozás bevezetés</title>
        <para>                
            <citation>KERNIGHANRITCHIE</citation>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/zmfT9miB-jY">https://youtu.be/zmfT9miB-jY</link>
        </para> 
         <para>Vezérlési szerkezetek</para>
            <para> 
                A kifejezések utasításokká válnak ha zokat pontosvessző követi. A kapcsos zárójelek között deklarációkat és utasitásokat helyezhetünk el. Ha kapcsos zárójelek között csak egy utasítás szerepel akkor az egyenértékű lesz. A következő vezérlési szerkezeteket külömbötethetünk meg: az if-else utasítás döntést írunk le. A switch utasítás nevezhető ennek a bővített formájának, mivel a switch a döntést több kimenetre is szét tudja ágaztatni, miközben az if utasítás ugyan ezt csak több, egybe ágyazott utasítással tudja elérni. A while utasítás addig ismétli a benne található utasításokat amíg a while ciklus fejében lévő feltétel teljesül. A for utasítás hasonlóan működik viszont annak meghatározott, előre definiált ismétlési száma van. Abreak utasítás megállítja azt az utasítást amelybe be van helyezve. A goto utasítás a vezérlés minden további dolog nélkül átadható a program bármely részének. 
               
            </para>       
    </section>        
    <section>
        <title>Programozás</title>
        <para>                
            <citation>BMECPP</citation>
        </para>
        <para> A C++ nem objektumorientált tulajdonságai</para>
        <para> 
            A c++ nyel a c programnyelv továbbfejlesztett változata. A C nyelv többször gondot okozó részeit cseréli le, más kényelmesebben használható szolgáltatásokra. C++ban a void függvény egy üres paramüterlistával rendelkező függvény, ellentétben a c  nyelvben ugyanez a gaykorlat azt jelenti hogy a függvény bármennyi paraméterrel meghívható. C++ban a min függvényben nem kötelezőa return használata. Bevezették a bool típust ami csak true vagy false értéket vehet fel. Bármilyen helyen állhat változódeklaráció ahol utasítás is állhat. A címszerinti paraméterátasás abban változott hogy a paraméter deklarációjában csak egy és jelet kell írnunk a praméter elé.
        </para>



    </section>        
</chapter>                
