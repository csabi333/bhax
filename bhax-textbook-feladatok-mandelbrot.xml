<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        
        <para>
            Megoldás forrása: :<link xlink:href="hhttps://sourceforge.net/p/udprog/code/ci/master/tree/source/binom/Batfai-Barki/frak/">https://sourceforge.net/p/udprog/code/ci/master/tree/source/binom/Batfai-Barki/frak/</link>               
        </para>
            <programlisting language="c"><![CDATA[
#include "png++/png.hpp"

#define N 500
#define M 500
#define MAXX 0.7
#define MINX -2.0
#define MAXY 1.35
#define MINY -1.35

void GeneratePNG( int tomb[N][M]){
    png::image< png::rgb_pixel > image(N, M);
    for (int x = 0; x < N; x++)
{
        for (int y = 0; y < M; y++)
        {
            image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
        }
    }
    image.write("kimenet.png");
}

struct Komplex{
    double re, im;
};

int main()
{
    int tomb[N][M];
    int i, j, k;

    double dx = (MAXX - MINX) / N;
    double dy = (MAXY - MINY) / M;

    struct Komplex C, Z, Zuj;

    int iteracio;

    for (i = 0; i < M; i++)
    {
        for (j = 0; j < N; j++)
        {
            C.re = MINX + j * dx;
            C.im = MAXY - i * dy;

            Z.re = 0;
            Z.im = 0;
            iteracio = 0;

            while(Z.re * Z.re + Z.im * Z.im < 4 && iteracio++ < 255)
            {
                Zuj.re = Z.re * Z.re - Z.im * Z.im + C.re;
                Zuj.im = 2 * Z.re * Z.im + C.im;
                Z.re = Zuj.re;
                Z.im = Zuj.im;
            }
            tomb[i][j] = 256 - iteracio;
        }
    }
    GeneratePNG(tomb);
    return 0;
}]]>
            </programlisting>
             <figure>
                <title>Mandebrot Kimenet</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="./mandelbrot.png" format="JPG"/>
                        </imageobject>
                    </mediaobject>
            </figure>

             <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
         <para>
            A matematikában a Mandelbrot-halmaz azon c komplex számokból áll (a „komplex számsík” azon pontjainak mértani helye, halmaza), melyekre az alábbi (komplex szám értékű) Z(n) rekurzív sorozat:
            <programlisting language="c"><![CDATA[
            	Zuj.re = Z.re * Z.re - Z.im * Z.im + C.re;
                Zuj.im = 2 * Z.re * Z.im + C.im;
                Z.re = Zuj.re;
                Z.im = Zuj.im;
            	}]]></programlisting>
            nem tart végtelenbe, azaz abszolút értékben (hosszára nézve) korlátos.
            A Mandelbrot-halmazt a komplex számsíkon ábrázolva, egy nevezetes (és hasonnevű) fraktálalakzat adódik.
            Jelen esetünkben a mandebrot halmaz ábrázolásához szükségünk lesz 
            'png++/png.hpp' header file-ra továbbá az evvel járó szintaxisok használatára. 
            A halmazt egy 500x500 mátrixban tároljuk majd ezt bejárva generáljuk a képünket róla a GeneratePNG() void segítségével. A matematikai háttér miatt létre kell hoznunk egy komplex struktúrát amely a tömb elemei lesznek.
        </para>  


    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
                
        </para>
      <para>
            Az előző feladatot fogjuk megoldani újra csak annyi különbséggel, hogy most a std::complex könyvtárat fogjuk használni. Ennek köszönhetően a komplex számokat nem két változóban tároljuk.
        </para>
        <para>
        struct Komplex{
    	double re, im;
		};
</para>
<para>
	E helyett a struktúra helyett  std::complexdouble Z ( reZ, imZ );
	szintaxissal majd ennek a változónak használatával az előző programunk csak annyiban változik hogy máshogy hivatkozunk a komplex számokat tartalmozó változókra.
	</para>
            
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            Megoldás forrása:
        </para>
        <programlisting language="c"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>


        	
  int main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}

            	}]]></programlisting>
<figure>
                <title>Biomorf Kimenet</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="./bmorf.png" format="JPG"/>
                        </imageobject>
                    </mediaobject>
            </figure>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>  
          <para>
            A Mandelbrot halmazban megtalálható az összes Júlia halmaz. A Júlia halmaz esetén a C konstans, és a rácsot a z-vel járjuk be. A Mandelbrot halamzban ez a c konstans helyett változóként szerepel melyhez z értékeket rendelünk. Szóval mindig új Júlia halmazt számolunk ki vele. Mikor egy Bug-os programmal Clifford Pickover rátalált a biomorfokra, akkor azt hitte természeti törvényre bukkant.
        </para>                       
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/CUDA">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/CUDA</link> 
        </para>
         <para>
            A CUDA egy többszálas, párhuzamos feldolgozási platform és API, amit az nvidia grafikus kártyák használnak.
            Ez a GPU-t használja a CPU helyett számításokra.
        </para>
        <para>
            Egy GPU esetében sokszorosan hatékonyabb párhuzamosítást érhetünk el a CPU-val szemben. Elérhetjük hogy a kép készítése során minden pixel egyszerre készüljön el, mert minden pixelnek megfelel egy szál, miközben a CPU-s verzió csak egy szállal rendelkezik.
        </para>
    
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/binom/Batfai-Barki/frak/">https://sourceforge.net/p/udprog/code/ci/master/tree/source/binom/Batfai-Barki/frak/</link>
        </para>
           <para>
           Használata:
            Telepíteni: sudo apt-get install libqt4-dev
            </para>
            <para>
            A program a QT GUI-t használja, ennek segítségével tudjuk elkészíteni a 
            programunkat. Ez a GUI az egyik legelterjedtebb
            garfikus interfésze a C++-nak. 
            Ezt telepítenünk kell előre.
                Fordítás:
                A  fájloknak egy mappában kell lennie. A mappában futtatni
                kell a qmake frak.pro  parancsot. Ez létre fog
                hozni egy Make fájlt. ezután ki adjuk a 'make' parancsot, mely létrehoz egy bináris fájlt. Ezt pedig a szokásos módon futtatjuk. 
               </para>
        <figure>
                <title>Mandebrot nagyító</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="./mandelnagyit.png" format="JPG"/>
                        </imageobject>
                    </mediaobject>
            </figure>


          

    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
    </section>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
